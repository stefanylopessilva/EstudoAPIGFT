// <auto-generated />
using System;
using CinemaAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CinemaAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211216184428_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("CinemaAPI.Models.Filme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DiaDaExibicao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Nota")
                        .HasColumnType("double");

                    b.Property<double>("ValorIngresso")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Filmes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiaDaExibicao = new DateTime(2021, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Romance",
                            Idioma = "Legendado",
                            ImagemUrl = "\\efd8fa90-beef-42fd-92a6-7363d6f2a2da.jpg",
                            Nome = "Titanic",
                            Nota = 9.1999999999999993,
                            ValorIngresso = 22.5
                        },
                        new
                        {
                            Id = 2,
                            DiaDaExibicao = new DateTime(2021, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Ficção Científica",
                            Idioma = "Dublado",
                            ImagemUrl = "\\6880916d-3518-4b89-a686-fe885653cad8.jpg",
                            Nome = "De volta para o futuro",
                            Nota = 8.9000000000000004,
                            ValorIngresso = 20.5
                        },
                        new
                        {
                            Id = 3,
                            DiaDaExibicao = new DateTime(2021, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Drama",
                            Idioma = "Legendado",
                            ImagemUrl = "\\762cce23-8936-4022-9cc9-58e53d3d7d39.jpg",
                            Nome = "Psicose",
                            Nota = 9.5,
                            ValorIngresso = 22.5
                        },
                        new
                        {
                            Id = 4,
                            DiaDaExibicao = new DateTime(2021, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Ficção Científica",
                            Idioma = "Legendado",
                            ImagemUrl = "\\1d1087fb-a3e6-4ec4-850a-a01b67043f61.jpg",
                            Nome = "Laranja mecânica",
                            Nota = 9.0999999999999996,
                            ValorIngresso = 22.5
                        });
                });

            modelBuilder.Entity("CinemaAPI.Models.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FilmeId")
                        .HasColumnType("int");

                    b.Property<double>("Preco")
                        .HasColumnType("double");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmeId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Reservas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilmeId = 1,
                            Preco = 22.5,
                            Quantidade = 1,
                            UsuarioId = 2
                        },
                        new
                        {
                            Id = 2,
                            FilmeId = 2,
                            Preco = 20.5,
                            Quantidade = 1,
                            UsuarioId = 3
                        },
                        new
                        {
                            Id = 3,
                            FilmeId = 3,
                            Preco = 45.0,
                            Quantidade = 2,
                            UsuarioId = 3
                        });
                });

            modelBuilder.Entity("CinemaAPI.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "clecio.silva@gft.com",
                            Nome = "Clécio",
                            Role = "Administrador",
                            Senha = "$DNEFSA$V1$10000$muv8uAcYdk+ST86L5ud+Rcmd5PmDYKTKOc/ADLmOeeuULH+1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "stefany.silva@gft.com",
                            Nome = "Stefany",
                            Role = "Usuario",
                            Senha = "$DNEFSA$V1$10000$OaCvHxEj1uXVB6WcLkl7u3zCByFfAX+IF40x5ieKVFtvSusi"
                        },
                        new
                        {
                            Id = 3,
                            Email = "thais.mendes@gft.com",
                            Nome = "Thais",
                            Role = "Usuario",
                            Senha = "$DNEFSA$V1$10000$IrqIQdghqvbIv2dhM7iyJZWoViN9HH9uTQqfBC40PlPZtiae"
                        });
                });

            modelBuilder.Entity("CinemaAPI.Models.Reserva", b =>
                {
                    b.HasOne("CinemaAPI.Models.Filme", null)
                        .WithMany("Reservas")
                        .HasForeignKey("FilmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaAPI.Models.Usuario", null)
                        .WithMany("Reservas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CinemaAPI.Models.Filme", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("CinemaAPI.Models.Usuario", b =>
                {
                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
